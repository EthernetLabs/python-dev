import serial
import os
import logging
import logging.handlers
from sysconfigx import *

class Serial_Functions():

	def __init__(self):
		self.parse = Parser_Functions()
		self.parse.parser_init()
		self.parse.ConfigSectionMap()

	def serial_init(self):
		_section = 'SERIAL'
		_device = self.parse.getSectionOption(_section, 'device')
		_baudrate = int(self.parse.getSectionOption(_section, 'baudrate'))
		_parity = self.parse.getSectionOption(_section, 'parity')
		_stopbits = int(self.parse.getSectionOption(_section, 'stopbits'))
		_bytesize = int(self.parse.getSectionOption(_section, 'bytesize'))
		_timeout = float(self.parse.getSectionOption(_section, 'timeout'))
		_inter_byte_delay = float(self.parse.getSectionOption(_section, 'inter_byte_delay'))
		try:
			self.ser = serial.Serial (port = _device, baudrate = _baudrate, timeout = _timeout, \
			   			  interCharTimeout = _inter_byte_delay, parity = _parity, \
						  stopbits = _stopbits, bytesize = _bytesize)
		except serial.SerialException:
			print "Serial Port Exception: " + _device + "\n"
            		return False
		self.ser.flush()
		#Initialize Logger
		_section = 'SYSLOG'
		_syslog_dir = self.parse.getSectionOption(_section, 'syslogdir')
		_syslog_file_serial = self.parse.getSectionOption(_section, 'syslogfileserial')
		_log_level = int(self.parse.getSectionOption(_section, 'loglevel'))
		_log_title = self.parse.getSectionOption(_section, 'logtitle')
		try:
    			os.stat(_syslog_dir)
		except:
    			os.mkdir(_syslog_dir)
		try:
    			os.remove(_syslog_dir + "/" + _syslog_file_serial)
		except OSError:
    			pass
		global _logger
		_logger = logging.getLogger(_log_title)
		_logger.setLevel(_log_level)
		_log_file = logging.FileHandler(_syslog_dir + "/" + _syslog_file_serial)
		_log_file.setLevel(_log_level)
		_log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - ' + self.__class__.__name__ + " : " + '%(message)s')
		_log_file.setFormatter(_log_formatter)
		_logger.addHandler(_log_file)
		#Initialize FRAME
		_section = 'FRAME'
		global _frame_netid_len
		global _frame_srcid_len
                global _frame_dstid_len
                global _frame_phytype_len
		global _frame_devtype_len
		global _frame_tom_len
		global _frame_prio_len
		global _frame_seqnum_len
		global _frame_pdul_len
		global _frame_pdut_len
		global _frame_pdu_len
		global _frame_ecc_len
		global _frame_fields_num
		global _frame_min_len
		global _frame_max_len
		_frame_netid_len = int(self.parse.getSectionOption(_section, 'netid'))
		_frame_srcid_len = int(self.parse.getSectionOption(_section, 'srcid'))
		_frame_dstid_len = int(self.parse.getSectionOption(_section, 'dstid'))
		_frame_phytype_len = int(self.parse.getSectionOption(_section, 'phytype'))
		_frame_devtype_len = int(self.parse.getSectionOption(_section, 'devtype'))
		_frame_tom_len = int(self.parse.getSectionOption(_section, 'tom'))
		_frame_prio_len = int(self.parse.getSectionOption(_section, 'prio'))
		_frame_seqnum_len = int(self.parse.getSectionOption(_section, 'seqnum'))
		_frame_pdul_len = int(self.parse.getSectionOption(_section, 'pdul'))
		_frame_pdut_len = int(self.parse.getSectionOption(_section, 'pdut'))
		_frame_pdu_len = int(self.parse.getSectionOption(_section, 'pdu'))
		_frame_ecc_len = int(self.parse.getSectionOption(_section, 'ecc'))
		_frame_fields_num = int(self.parse.getSectionOption(_section, 'framefields'))
		_frame_min_len = _frame_netid_len + _frame_srcid_len + _frame_dstid_len + _frame_phytype_len + _frame_devtype_len + \
				 _frame_tom_len + _frame_prio_len + _frame_seqnum_len + _frame_pdul_len + _frame_pdut_len + _frame_ecc_len
		_frame_max_len = _frame_min_len + _frame_pdu_len

	def serial_write(self, _cmd):
		self.ser.write(_cmd)
		print "wrote: " + _cmd

	def serial_readline(self):
		_port_data = None
		_port_data = self.ser.readline().strip()
		if _port_data is None:
			return False
		elif _port_data is "":
			return False
		else:
			_logger.debug(_port_data)
			return True
			
	

	def get_serial_conf(self):
		print self.ser.getSettingsDict()

	def flush_buffer(self):
		self.ser.flush()

