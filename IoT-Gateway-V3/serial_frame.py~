import serial
import os
import logging
import logging.handlers
from sysconfigx import *

class Serial_Functions():

	def __init__(self):
		self.parse = Parser_Functions()
		self.parse.parser_init()
		self.parse.ConfigSectionMap()

		#Initialize FRAME
		_section = 'FRAME'
		global _frame_netid_len
		global _frame_srcid_len
                global _frame_dstid_len
                global _frame_phytype_len
		global _frame_devtype_len
		global _frame_tom_len
		global _frame_prio_len
		global _frame_seqnum_len
		global _frame_pdul_len
		global _frame_pdut_len
		global _frame_pdu_len
		global _frame_ecc_len
		global _frame_fields_num
		global _frame_min_len
		global _frame_max_len
		_frame_netid_len = int(self.parse.getSectionOption(_section, 'netid'))
		_frame_srcid_len = int(self.parse.getSectionOption(_section, 'srcid'))
		_frame_dstid_len = int(self.parse.getSectionOption(_section, 'dstid'))
		_frame_phytype_len = int(self.parse.getSectionOption(_section, 'phytype'))
		_frame_devtype_len = int(self.parse.getSectionOption(_section, 'devtype'))
		_frame_tom_len = int(self.parse.getSectionOption(_section, 'tom'))
		_frame_prio_len = int(self.parse.getSectionOption(_section, 'prio'))
		_frame_seqnum_len = int(self.parse.getSectionOption(_section, 'seqnum'))
		_frame_pdul_len = int(self.parse.getSectionOption(_section, 'pdul'))
		_frame_pdut_len = int(self.parse.getSectionOption(_section, 'pdut'))
		_frame_pdu_len = int(self.parse.getSectionOption(_section, 'pdu'))
		_frame_ecc_len = int(self.parse.getSectionOption(_section, 'ecc'))
		_frame_fields_num = int(self.parse.getSectionOption(_section, 'framefields'))
		_frame_min_len = _frame_netid_len + _frame_srcid_len + _frame_dstid_len + _frame_phytype_len + _frame_devtype_len + \
				 _frame_tom_len + _frame_prio_len + _frame_seqnum_len + _frame_pdul_len + _frame_pdut_len + _frame_ecc_len
		_frame_max_len = _frame_min_len + _frame_pdu_len

	def serial_write(self, _cmd):
		self.ser.write(_cmd)
		print "wrote: " + _cmd

	def serial_readline(self):
		_port_data = None
		_port_data = self.ser.readline().strip()
		if _port_data is None:
			return False
		elif _port_data is "":
			return False
		else:
			_logger.debug(_port_data)
			return True
			
	

	def get_serial_conf(self):
		print self.ser.getSettingsDict()

	def flush_buffer(self):
		self.ser.flush()

