def validate_frame(self, _frame):
		global _mac_id
		_reconstructed_frame = "NULL"
		if _frame is None:
			return [False, _reconstructed_frame]
		elif _frame is "":
			return [False, _reconstructed_frame]
		elif _frame.startswith('OK'):
			return [False, _reconstructed_frame]
		elif len(_frame) < _frame_min_len:
			print "len(_frame) < _frame_min_len\n"
			return [False, _reconstructed_frame]
		elif len(_frame) > _frame_max_len:
			print "len(_frame) > _frame_max_len\n"
			return [False, _reconstructed_frame]
		elif _frame.startswith("+DATA:") and ("BYTES" in _frame):
			print "_frame.startswith(+DATA:)\n"
			try:
				_mac_id=_frame.split(" ")[4]
				print "MAC: " + _mac_id + "\n"
			except IndexError:
				print "Invalid Frame, Unable to parse MAC: List index out of range" + "\n"
				return [False, _reconstructed_frame]
			return [True, _reconstructed_frame]
		#elif _mac_id is None:
		#	print "MAC ID: is NULL\n"
		#	return [False, _reconstructed_frame]
		else:	
			print "FRAME: " + str(_frame) + "\n"
			_expanded_frame=['NETID', 'DEVID', 'DEVTYPE', 'MACID', 'TOM', \
					 'PRIO', 'SEQNUM', 'PDU']
			try:	
				_expanded_frame[0] = _frame[1:3]
				_expanded_frame[1] = _frame[3:5]
				_expanded_frame[2] = _frame[5]
			except IndexError:
                        	print "error parsing, index out of range!\n"
				return [False, _reconstructed_frame]
			try:
				_mac_id
			except NameError:
				return [False, _reconstructed_frame]
			try:
				_expanded_frame[3] = str(_mac_id)
				_expanded_frame[4] = _frame[6]
				_expanded_frame[5] = _frame[7]
				_expanded_frame[6] = _frame[8:10]
				_expanded_frame[7] = _frame[10:]
			except IndexError:
				print "Invalid Frame, Unable to parse MAC: List index out of range" + "\n"
				return [False, _reconstructed_frame]
			if len(_expanded_frame) < _frame_fields_num:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame) > _frame_fields_num:
				return [False, _reconstructed_frame]
			#Verify NETID Field Width
			elif len(_expanded_frame[0]) > _frame_netid_len:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame[0]) < _frame_netid_len:
				return [False, _reconstructed_frame]
			#Verify DEVID Field Width
			elif len(_expanded_frame[1]) > _frame_devid_len:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame[1]) < _frame_devid_len:
				return [False, _reconstructed_frame]
			#Verify DEVTYPE Field Width
			elif len(_expanded_frame[2]) > _frame_devtype_len:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame[2]) < _frame_devtype_len:
				return [False, _reconstructed_frame]
			#Verify MACID Field Width
			elif len(_expanded_frame[3]) > _frame_macid_len:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame[3]) < _frame_macid_len:
				return [False, _reconstructed_frame]
			#Verify TOM Field Width
			elif len(_expanded_frame[4]) > _frame_tom_len:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame[4]) < _frame_tom_len:
				return [False, _reconstructed_frame]
			#Verify PRIO Field Width
			elif len(_expanded_frame[5]) > _frame_prio_len:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame[5]) < _frame_prio_len:
				return [False, _reconstructed_frame]
			#Verify SEQNUM Field Width
			elif len(_expanded_frame[6]) > _frame_seqnum_len:
				return [False, _reconstructed_frame]
			elif len(_expanded_frame[6]) < _frame_seqnum_len:
				return [False, _reconstructed_frame]
			#Verify PDU Field Width
			elif len(_expanded_frame[7]) > _frame_pdu_len:
				return [False, _reconstructed_frame]
			else:		
				_reconstructed_frame = {'NETID'		: _expanded_frame[0], \
							'DEVID'		: _expanded_frame[1], \
							'DEVTYPE'	: _expanded_frame[2], \
							'MACID'		: _expanded_frame[3], \
							'TOM'		: _expanded_frame[4], \
							'PRIO'		: _expanded_frame[5], \
							'SEQNUM'	: _expanded_frame[6], \
							'PDU'		: _expanded_frame[7]}
				print "Reconstructed FRAME is: " + str(_reconstructed_frame) + "\n"
				return [True, _reconstructed_frame]





if _validation_status is True:
				print "Frame is Valid!\n"
				return _reconstructed_frame
			else:
				print "ERROR -> Frame is InValid!\n"
				return False

